var documenterSearchIndex = {"docs":
[{"location":"license.html#License","page":"License","title":"License","text":"","category":"section"},{"location":"license.html","page":"License","title":"License","text":"MIT License","category":"page"},{"location":"license.html","page":"License","title":"License","text":"Copyright (c) 2023 Dominik Bergermann, Nick Michaelis","category":"page"},{"location":"license.html","page":"License","title":"License","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"license.html","page":"License","title":"License","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"license.html","page":"License","title":"License","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"getting_started.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started.html#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"Clone into directory of choice. Include the module with:","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"include(\"src/KeyVNA.jl\")\nimport .KeyVNA","category":"page"},{"location":"getting_started.html#Example-usage","page":"Getting Started","title":"Example usage","text":"","category":"section"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"A simple example on how to use the Package. Connecting to the VNA and performing a sweep.","category":"page"},{"location":"getting_started.html","page":"Getting Started","title":"Getting Started","text":"include(\"src/KeyVNA.jl\")\nimport .KeyVNA\n\n# Connect to the VNA using the IP\nvna = KeyVNA.connect(\"127.0.0.1\")\n\n# Perform a single trace\n# Returns the scattering parameter for each frequency point as a\n# Vector{ComplexF64}\ndata = KeyVNA.getTrace(vna)\n\n# Returns the frequency points\nfreq = KeyVNA.getFrequencies(vna)","category":"page"},{"location":"setup_file.html#Setup-file","page":"Setup File","title":"Setup file","text":"","category":"section"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"To make it easier and more reliable to setup the VNA, the settings can be stored in a .txt file. For now, only a handful of the most basic settings, are implemented. But it can be extended easily.","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"For more information on all the settings see the documentation for the SCPI protocoll provided by Keysight. Note that this is a general SCPI documentation and therefore not every command may be implemented on your specific Device.","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"The settings can then be loaded using the function setupFromFile.","category":"page"},{"location":"setup_file.html#Syntax","page":"Setup File","title":"Syntax","text":"","category":"section"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"Each settings corresponds to a 4 uppercase letter identifier ID (eg. PWLV). After the identifier comes a :, followed by the value VAL. Multiple values are also possible by seperating them by another : (parsed as an tuple). Depending on the setting, the value is interpreted as a different type (String, Integer, etc.). It is the users responsibility to ensure the correct type is given.","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"# A single valued setting\n<ID>:<VAL> # another comment\n\n# A double valued setting\n<ID>:<VAL1>:<VAL2>","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"Each setting must be on a seperate line.","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"Everything after a # is a comment and ignored by the parser.","category":"page"},{"location":"setup_file.html#Implemented-settings","page":"Setup File","title":"Implemented settings","text":"","category":"section"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"The following table gives a overview over every settings implemented up to date.","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"Setting ID Value Type Unit\nPowerlevel PWLV Integer dBm\nFrequency Band (Center, Span) FREQ Tuple{Float} Hz\nIF Bandwidth IFBW Float Hz\nSweeppoints SWPP Integer \nCalibration CALB String \nMeasurement MSRM String \nDisplay Format FRMT String \nAveraging AVRG Bool ","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"[!NOTE] The calibration string is a label given to each calibration stored on the VNA.","category":"page"},{"location":"setup_file.html#Example","page":"Setup File","title":"Example","text":"","category":"section"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"Below is a simple example of a setup file.","category":"page"},{"location":"setup_file.html","page":"Setup File","title":"Setup File","text":"PWLV:9\nFREQ:20.00e9:3e9\nSWPP:128\nIFBW:100e3\nCALB:{483B25B2-6FE9-483E-8A93-0527B8D277E2}\nMSRM:CH1_S11_1","category":"page"},{"location":"methods.html#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods.html#Index","page":"Methods","title":"Index","text":"","category":"section"},{"location":"methods.html","page":"Methods","title":"Methods","text":"","category":"page"},{"location":"methods.html#Structs","page":"Methods","title":"Structs","text":"","category":"section"},{"location":"methods.html","page":"Methods","title":"Methods","text":"VNAParameters","category":"page"},{"location":"methods.html#Main.KeyVNA.VNAParameters","page":"Methods","title":"Main.KeyVNA.VNAParameters","text":"VNAParameters\n\nThis struct is used to store some important VNA settings and is returned by instrumentSimplifiedSetup.\n\nThe fields are:\n\ncalName::String Calibration label\npower::Integer Power level\ncenter::Float64 Frequency center\nspan::Float64 Frequency span\nifbandwidth::Integer IF bandwidth\nsweepPoints::Integer Sweep points\nsweepTime::Float64 Sweep time\nfastSweep::Bool Fast sweep\n\n\n\n\n\n","category":"type"},{"location":"methods.html#Functions","page":"Methods","title":"Functions","text":"","category":"section"},{"location":"methods.html","page":"Methods","title":"Methods","text":"connect","category":"page"},{"location":"methods.html#Main.KeyVNA.connect","page":"Methods","title":"Main.KeyVNA.connect","text":"connect(host; port=5025)\n\nEstablish a TCP connection to the VNA with IP address host. Return a TCPSocket if succesful and nothing if not.\n\n\n\n\n\n","category":"function"},{"location":"methods.html","page":"Methods","title":"Methods","text":"[!NOTE] nothing is a return type used in Julia for indicating, that it is intended to return nothing.","category":"page"},{"location":"methods.html","page":"Methods","title":"Methods","text":"disconnect\nidentify\nclearStatus\n\nKeyVNA.send\nKeyVNA.recv\n\ninstrumentSimplifiedSetup\nsetPowerLevel\nsetCalibration\nsetFrequencies\nsetSweepPoints\nsetIFBandwidth\nsetMeasurement\nsetFormat2Log\nsetFastSweep\nsetAveraging\nsetupFromFile\n\ntriggerContinuous\ntriggerHold\ntriggerSingle\n\nsaveS2P\ngetFrequencies\ngetSweepTime\n\ngetTrace\nstoreTraceInMemory\ngetTraceFromMemory\ngetTraceCatalog\ndeleteTrace\ndeleteAllTraces\n\nKeyVNA.complexFromTrace","category":"page"},{"location":"methods.html#Main.KeyVNA.disconnect","page":"Methods","title":"Main.KeyVNA.disconnect","text":"disconnect(socket)\n\nCloses the TCP connection socket.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.identify","page":"Methods","title":"Main.KeyVNA.identify","text":"identify(socket)\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.clearStatus","page":"Methods","title":"Main.KeyVNA.clearStatus","text":"clearStatus(socket)\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.send","page":"Methods","title":"Main.KeyVNA.send","text":"send(socket::TCPSocket, msg::String)\n\nSend msg to the TCP socket socket.\n\nCan be used to send any SCPI command directly to the VNA.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.recv","page":"Methods","title":"Main.KeyVNA.recv","text":"recv(socket::TCPSocket)\n\nReceive and return all buffered bytes from socket. If none are available, wait. Returns a Vector{UInt8}.\n\n\n\n\n\nrecv(socket::TCPSocket, nb::Integer)\n\nReceive and return nb number of bytes from socket. Returns a Vector{UInt8}.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.instrumentSimplifiedSetup","page":"Methods","title":"Main.KeyVNA.instrumentSimplifiedSetup","text":"instrumentSimplifiedSetup(socket::Sockets.TCPSocket; <keyword arguments>)\n\nChange basic settings of the VNA specified by socket. Returns struct VNAParameters.\n\nKeyword Arguments\n\ncalName::String = cals[:c3GHz]: Name of the calibration to use\npower::Int = -20: Power level (dBm)\ncenter::Float64 = 20.025e9: Center of the frequency band (Hz)\nspan::Float64 = 50e6: Span of the frequency band (Hz)\nifbandwidth::Int = Int(5e6): IF Bandwidth (Hz)\nsweepPoints::Int = 101 Number of sweep points in frequency band\nfastSweep::Bool = true: Enable Fast Sweep mode\nmeasurement::String = \"CH1_S11_1\": Set which Channel, Parameter and Trace to measure\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setPowerLevel","page":"Methods","title":"Main.KeyVNA.setPowerLevel","text":"setPowerLevel(socket::TCPSocket, power::Integer)\n\nSet the power level, of the VNA specified by socket, to power dBm.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setCalibration","page":"Methods","title":"Main.KeyVNA.setCalibration","text":"setCalibration(socket::TCPSocket ,calName::String)\n\nSet the calibration file, of the VNA specified by socket, to calName\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setFrequencies","page":"Methods","title":"Main.KeyVNA.setFrequencies","text":"setFrequencies(socket::TCPSocket, center::Float64, span::Float64)\n\nSet frequency band, of the VNA specified by socket. The band is given by the center frequency and the span. The bounds are then given by center ± span/2.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setSweepPoints","page":"Methods","title":"Main.KeyVNA.setSweepPoints","text":"setSweepPoints(socket::TCPSocket, points::Integer)\n\nSet number of sweep points, of the VNA specified by socket.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setIFBandwidth","page":"Methods","title":"Main.KeyVNA.setIFBandwidth","text":"setIFBandwidth(socket::TCPSocket, bandwidth::Integer)\n\nSet IF bandwidth, of the VNA specified by socket.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setMeasurement","page":"Methods","title":"Main.KeyVNA.setMeasurement","text":"setMeasurement(socket::TCPSocket, name::String)\n\nSet wich measurement, of the VNA specified by socket, to use.\n\nname\n\nThe string has to be in a certain format \"CH<n>_S<p>_<t>\"`, with:\n\nn: Channel number\np: Scattering parameter\nt: trace number\n\nFor example the String \"CH1_S11_1\" selects Channel 1, the parameter S11 and the trace 1.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setFormat2Log","page":"Methods","title":"Main.KeyVNA.setFormat2Log","text":"setFormat2Log(socket::TCPSocket)\n\nSet the format of the VNA display to logarithmic scale.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setFastSweep","page":"Methods","title":"Main.KeyVNA.setFastSweep","text":"setFastSweep(socket::TCPSocket, fast::Bool)\n\nEnable Fast Sweep mode.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setAveraging","page":"Methods","title":"Main.KeyVNA.setAveraging","text":"setAveraging(socket::TCPSocket, state::Bool; counts::Int=50)\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.setupFromFile","page":"Methods","title":"Main.KeyVNA.setupFromFile","text":"setupFromFile(socket::TCPSocket,file::String)\n\nSet up the VNA specified by socket according to the settings specified in file.\n\nTODO: For more information see ...\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.triggerContinuous","page":"Methods","title":"Main.KeyVNA.triggerContinuous","text":"triggerContinuous(socket::TCPSocket)\n\nSet the trigger of the VNA to continous.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.triggerHold","page":"Methods","title":"Main.KeyVNA.triggerHold","text":"triggerHold(socket::TCPSocket)\n\nSet the trigger of the VNA to hold.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.triggerSingle","page":"Methods","title":"Main.KeyVNA.triggerSingle","text":"triggerSingle(socket::TCPSocket)\n\nTrigger the VNA once.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.saveS2P","page":"Methods","title":"Main.KeyVNA.saveS2P","text":"saveS2P(socket::TCPSocket, fileURL::String)\n\nSave the measurement as a S2P file fileUrl onto the VNA internal harddrive.\n\nNote, that the file is not beeing saved on the VNA and not the device, where this function is being called. The file can then be transfered manually.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.getFrequencies","page":"Methods","title":"Main.KeyVNA.getFrequencies","text":"getFrequencies(socket::TCPSocket)\n\nReturn all the actual sweep points as a Vector{Float64}.\n\nThe sweep points are the frequencies at which the scattering parameter is measured during a sweep. They are specified by the number of sweeppoints and the frequency range.\n\nSee also setSweepPoints, setFrequencies.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.getSweepTime","page":"Methods","title":"Main.KeyVNA.getSweepTime","text":"getSweepTime(socket::TCPSocket)\n\nReturns the time the VNA takes for the sweep.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.getTrace","page":"Methods","title":"Main.KeyVNA.getTrace","text":"getTrace(socket::TCPSocket)\n\nPerforms a sweep and returns a Vector{ComplexF64} of the scattering parameter.\n\nEach element corresponds the the scattering parameter at the frequency given by the element of getFrequencies with the same index.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.storeTraceInMemory","page":"Methods","title":"Main.KeyVNA.storeTraceInMemory","text":"storeTraceInMemory(socket::TCPSocket, mnum::Integer)\n\nPerform a sweep and store the trace in the memory of the VNA.\n\nmnum must be a unique integer. It is used to store and identify multiple traces at the same time. If a trace with the same mnum already exists, the VNA will throw an error and the trace is not stored. Existing traces can only be overridden if the it is deleted first. The trace is stored as a measurement called \"data_<mnum>\" on the VNA. The prefix \"data_\" is used to distinguish the stored traces from any other created by the VNA itself.\n\nSee also deleteTrace, deleteAllTraces and getTraceFromMemory.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.getTraceFromMemory","page":"Methods","title":"Main.KeyVNA.getTraceFromMemory","text":"getTraceFromMemory(socket::TCPSocket, mnum::Integer; delete=true)\n\nReturns the trace stored in the memory specified by mnum.\n\nSee also getTrace, deleteTrace and deleteAllTraces.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.getTraceCatalog","page":"Methods","title":"Main.KeyVNA.getTraceCatalog","text":"getTraceCatalog(socket::TCPSocket)\n\nReturns a list as a String, with all traces stored in the VNA. Not only those, that are created by storeTraceInMemory.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.deleteTrace","page":"Methods","title":"Main.KeyVNA.deleteTrace","text":"deleteTrace(socket::TCPSocket, mnum::Integer)\n\nDelete the trace with the identifier mnum.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.deleteAllTraces","page":"Methods","title":"Main.KeyVNA.deleteAllTraces","text":"deleteAllTraces(socket::TCPSocket)\n\nDelete all traces, which were created by storeTraceInMemory.\n\n\n\n\n\n","category":"function"},{"location":"methods.html#Main.KeyVNA.complexFromTrace","page":"Methods","title":"Main.KeyVNA.complexFromTrace","text":"complexFromTrace(data::Vector{Float64})\n\nTakes the raw datareturned by the VNA and returns aVector{ComplexF64}`.\n\nThe VNA returns a Vector{Float64}, where the each complex number is represented by two successive Float64, where the first is the real part and the second the imaginary.\n\n\n\n\n\n","category":"function"},{"location":"index.html#KeyVNA","page":"About","title":"KeyVNA","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"KeyVNA is an API for Keysight Vector Network Analyzers. Based on the SCPI protocoll.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"This module was created as part of the MADMAX project at RWTH Aachen and is used to interface a N5224B PNA network analyzer. It was only used and tested on this device. But it probably can be used for other network analyzers by keysight as it relies on the SCPI protocoll. The functionality is suited to the needs of one project and therefore offers not yet the full functionality possible.","category":"page"},{"location":"index.html","page":"About","title":"About","text":"This documentation gives a overview over the package and its usage. For a quick start see Getting Started.","category":"page"},{"location":"index.html#Contents","page":"About","title":"Contents","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"","category":"page"},{"location":"index.html#Contact","page":"About","title":"Contact","text":"","category":"section"},{"location":"index.html","page":"About","title":"About","text":"KeyVNA was developed by","category":"page"},{"location":"index.html","page":"About","title":"About","text":"Bergermann, Dominik dominik.bergermann@rwth-aachen.de\nMichaelis, Nick nick.michaelis@rwth-aachen.de","category":"page"}]
}
